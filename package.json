{
  "name": "your-project-name",
  "version": "1.0.0",
  "scripts": {
    "deploy:testnet": "source .env && forge script script/Counter.s.sol:CounterScript --rpc-url $RPC_URL --private-key $PRIVATE_KEY",
    "generate-types": "ts-node scripts/generateTypes.ts",
    "run-rsa": "ts-node scripts/run-rsa.ts",
    "test:unit": "TS_NODE_PROJECT=tsconfig.test.json mocha -r ts-node/register -r tsconfig-paths/register --timeout 10000 test/unit/**/*.test.{ts,tsx}",
    "test:integration": "RUN_INTEGRATION_TESTS=true TS_NODE_PROJECT=tsconfig.test.json mocha -r ts-node/register -r tsconfig-paths/register --timeout 30000 test/integration/**/*.test.ts",
    "test:forge": "forge test",
    "test:solidity": "forge test",
    "test:typescript": "TS_NODE_PROJECT=tsconfig.test.json mocha -r ts-node/register -r tsconfig-paths/register --timeout 30000 'test/typescript/unit/**/*.test.ts'",
    "test": "npm run test:solidity",
    "start:anvil": "ts-node scripts/anvil.ts start",
    "stop:anvil": "ts-node scripts/anvil.ts stop",
    "deploy:anvil": "ts-node scripts/anvil.ts deploy",
    "build:ts": "tsc --project tsconfig.json",
    "build:contracts": "forge build",
    "build": "npm run build:contracts && npm run typechain",
    "clean": "rm -rf dist/ && find . -type f -name \"*.js\" -not -path \"./node_modules/*\" -not -path \"./dist/*\" -delete",
    "typechain": "ts-node scripts/processAbis.ts",
    "generate-mocks": "ts-node scripts/generateMocks.ts",
    "build:all": "npm run clean && npm run build && npm run generate-mocks",
    "generate-foundry-mocks": "foundry-mock-generator --contracts ./contracts --out ./out --genDir ./test/foundry/mocks",
    "test:typescript:unit": "TS_NODE_PROJECT=tsconfig.test.json mocha -r ts-node/register -r tsconfig-paths/register --timeout 10000 'test/typescript/unit/**/*.test.ts'",
    "clean:tests": "rm -rf test/mocks && mkdir -p test/typescript/mocks",
    "test:rsa": "TS_NODE_PROJECT=tsconfig.test.json mocha -r ts-node/register -r tsconfig-paths/register --timeout 10000 'test/typescript/unit/client/rsaEncryption.test.ts'",
    "inspect:contractutils": "ts-node -e \"import { ContractUtils } from './shared/ethereum/contractUtils'; import { ethers } from 'ethers'; const provider = new ethers.JsonRpcProvider(); const privateKey = ethers.Wallet.createRandom().privateKey; const utils = new ContractUtils(provider, privateKey); console.log('ContractUtils properties:', Object.getOwnPropertyNames(utils), Object.getOwnPropertyNames(Object.getPrototypeOf(utils)));\""
  },
  "dependencies": {
    "node-forge": "^1.3.1"
  },
  "devDependencies": {
    "@testing-library/react-hooks": "^8.0.1",
    "@typechain/ethers-v6": "^0.5.1",
    "@typechain/hardhat": "^9.1.0",
    "@types/chai": "^5.2.0",
    "@types/jest": "^29.5.14",
    "@types/mocha": "^10.0.10",
    "@types/node-forge": "^1.3.11",
    "@types/react": "^17.0.83",
    "@types/react-dom": "^17.0.26",
    "chai": "^5.2.0",
    "glob": "^11.0.1",
    "jest": "^29.7.0",
    "mocha": "^11.1.0",
    "react-test-renderer": "^17.0.2",
    "ts-jest": "^29.2.6",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typechain": "^8.3.2",
    "typescript": "^5.0.0"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "testMatch": [
      "**/test/**/*.test.ts"
    ]
  }
}
